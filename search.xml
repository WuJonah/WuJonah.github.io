<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[]]></title>
    <url>%2F2017%2F11%2F09%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E5%B1%95%E7%A4%BA%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[#文件上传,展示和错误处理功能 ##步骤： ###1.使用Thymeleaf作为模板引擎，添加页面 profile.html &lt;h2 class=&quot;indigo-text center&quot; th:text=&quot;#{profile.title}&quot;&gt;Personal info&lt;/h2&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col m8 s12 offset-m2&quot;&gt; &lt;img th:src=&quot;@{/uploadedPicture}&quot; width=&quot;100&quot; height=&quot;100&quot;/&gt; &lt;/div&gt; &lt;div class=&quot;col s12 center red-text&quot; th:text=&quot;${error}&quot; th:if=&quot;${error}&quot;&gt; Error during upload &lt;/div&gt; &lt;form th:action=&quot;@{/profile}&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; class=&quot;col m8 s12 offset-m2&quot;&gt; &lt;div class=&quot;input-field col s6&quot;&gt; &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot;/&gt; &lt;/div&gt; &lt;div class=&quot;col s6 center&quot;&gt; &lt;button class=&quot;btn indigo waves-effect waves-light&quot; type=&quot;submit&quot; name=&quot;upload&quot; th:text=&quot;#{upload}&quot;&gt; &lt;!-- 触发上传 --&gt; Upload &lt;i class=&quot;mdi-content-send right&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; ###2.后台代码 pictureuploadController @Autowired //构造方法 public PictureUploadController(PicturesUploadProperties uploadProperties, MessageSource messageSource,UserProfileSession userProfileSession ){ uploadPath = uploadProperties.getUploadPath(); pictures = uploadProperties.getPictures(); this.messageSource = messageSource; this.userProfileSession = userProfileSession; } @RequestMapping(value = &quot;/uploadedPicture&quot;) //配置页面响应图片 public void getUploadedPicture(HttpServletResponse response) throws IOException{ // ClassPathResource classPathResource = new ClassPathResource(&quot;/images/google.gif&quot;); Resource res = userProfileSession.getPicturePath(); if(res == null){ res = pictures; } response.setHeader(&quot;Content-Type&quot;, URLConnection.guessContentTypeFromName(res.getFilename())); IOUtils.copy(res.getInputStream(),response.getOutputStream()); } @RequestMapping(value = &quot;/profile&quot;,params = &quot;upload&quot;,method = RequestMethod.POST) //上传功能 public String onUpload(@RequestParam MultipartFile file, RedirectAttributes redirectAttributes ) throws IOException { //RedirectAttributes专门用于重定向之后还能带参数跳转的的工具类 if(file.isEmpty()|| !isImage(file)){ redirectAttributes.addFlashAttribute(&quot;error&quot;,&quot;Incorrect file. Please upload a picture.&quot;); //带参数重定向 return &quot;redirect:/profile&quot;; } Resource res = copyFileToPic(file); userProfileSession.setPicturePath(res); return &quot;redirect:profile &quot;; } @RequestMapping(&quot;uploadError&quot;) public ModelAndView onUploadError(Locale locale){ ModelAndView md = new ModelAndView(&quot;profile/uploadPage&quot;); md.addObject(&quot;error&quot;,messageSource.getMessage(&quot;upload.file.too.big&quot;,null,locale)); md.addObject(&quot;profileForm&quot;,userProfileSession.toForm()); return md; } private Resource copyFileToPic(MultipartFile file) throws IOException{ String fileExtension = getFileExtension(file.getOriginalFilename()); File tempFile = File.createTempFile(&quot;pic&quot;,fileExtension,uploadPath.getFile()); try(InputStream in = file.getInputStream() ; OutputStream out = new FileOutputStream(tempFile)){ IOUtils.copy(in,out); } return new FileSystemResource(tempFile); } private boolean isImage(MultipartFile file){ return file.getContentType().startsWith(&quot;image&quot;); //getContentType()方法会返回文件的多用途Internet邮件扩展类型。它将会是image/png,image/jpg等，所以判断是否是image开头即可。 } private static String getFileExtension(String name){ //返回name的文件格式名如gif,jpg等 return name.substring(name.lastIndexOf(&quot;.&quot;)); } @ExceptionHandler(IOException.class) public ModelAndView handleIOException(Locale locale){ ModelAndView modelAndView = new ModelAndView(&quot;profile/uploadPage&quot;); modelAndView.addObject(&quot;error&quot;,messageSource.getMessage(&quot;upload.io.exception&quot;,null,locale)); modelAndView.addObject(&quot;profileForm&quot;,userProfileSession.toForm()); return modelAndView; } ###3.管理上传属性 ####3.1 定义picturesuploadproperties类通过application.properties文件来配置上传目录以及默认用户图片的路径 @ConfigurationProperties会告诉springboot以一种类型安全的方式，自动映射类路径下所发现的属性（默认情况下，位于application.properties文件中） ####3.2 添加定义picturesuploadproperties类到配置中 ####3.3 在配置文件中添加属性值 ConfigurationProperties属性，uploadPath是在应用的根目录下，pictures位于类路径下upload.pictures.uploadPath=file:./picturesupload.pictures.pictures=classpath:/images/002.jpg 另外的还有一些转换错误信息之类的，下次再说。]]></content>
  </entry>
  <entry>
    <title><![CDATA[新文章]]></title>
    <url>%2F2017%2F07%2F17%2FMy-New-Post%2F</url>
    <content type="text"><![CDATA[hello world.]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>work</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
